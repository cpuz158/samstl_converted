// 3_함수객체1
#include <iostream>

// function object("함수객체", functor 라고도 합니다.)
// => () 연산자 함수를 재정의 해서 함수 처럼 사용가능한 객체!!
// => 객체지만 함수 처럼 사용가능하다고 해서 "함수객체"라고 합니다.

// 일반함수(add(1,2) 처럼) 를 사용하면 되는데.. 왜 함수객체를 사용하나요 ?
// 장점 1. 상태를 가지는 함수
// 장점 2. 특정상황에서 일반함수보다 함수객체가 빠르다.

struct Plus
{
	int operator()(int a, int b)
	{
		return a + b;
	}
};
int main()
{
	Plus p; // Plus 라는 구조체 타입의 객체 p	
			// p는 함수가 아닙니다.. 객체입니다.

	int n = p(1, 2); // p는 객체인데, 함수 처럼 사용됩니다.
					 // "함수객체"라고 합니다.				
					 // p.operator()(1, 2) 를 찾는 원리 입니다.

	// 아래 4줄에서 a 가 "사용자 정의 타입" 이라면
	// a + b; // a.operator+(b) 
	// a - b; // a.operator-(b) 
	// a();   // a.operator()()
	// a(1,2);// a.operator()(1,2) 를 컴파일러가 찾게 됩니다.
}
